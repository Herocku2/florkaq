name: Deploy Florka Fun to Contabo VPS

on:
  push:
    branches: [ main, master, feat/ui-uniformity ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies (Frontend)
      run: |
        npm install
        
    - name: Install dependencies (Backend)
      run: |
        cd backend
        npm install
        
    - name: Build React App
      run: |
        npm run build
        
    - name: Deploy to Contabo VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.CONTABO_HOST }}
        username: ${{ secrets.CONTABO_USERNAME }}
        password: ${{ secrets.CONTABO_PASSWORD }}
        port: ${{ secrets.CONTABO_PORT }}
        script: |
          # Crear directorio del proyecto si no existe
          mkdir -p /opt/florka-fun
          cd /opt/florka-fun
          
          # Detener contenedores existentes
          docker-compose down || true
          
          # Limpiar archivos anteriores (excepto datos persistentes)
          rm -rf frontend backend package*.json *.js *.json public src .env* || true
          
          # Limpiar completamente y clonar la rama correcta
          rm -rf .git || true
          git clone -b feat/ui-uniformity https://github.com/Herocku2/kiroflorka.git temp-repo
          mv temp-repo/* . 2>/dev/null || true
          mv temp-repo/.* . 2>/dev/null || true
          rm -rf temp-repo
          
          # Verificar que tenemos la versión correcta
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Latest commit should be: 747cddce"
        
    - name: Setup and deploy on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.CONTABO_HOST }}
        username: ${{ secrets.CONTABO_USERNAME }}
        password: ${{ secrets.CONTABO_PASSWORD }}
        port: ${{ secrets.CONTABO_PORT }}
        script: |
          cd /opt/florka-fun
          
          # Crear archivo .env para producción si no existe
          if [ ! -f .env ]; then
            cat > .env << EOF
          NODE_ENV=production
          VITE_API_URL=https://florkafun.online:1337/api
          REACT_APP_API_URL=https://florkafun.online:1337/api
          DATABASE_CLIENT=sqlite
          DATABASE_FILENAME=.tmp/data.db
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
          APP_KEYS=${{ secrets.APP_KEYS }}
          API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
          TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
          EOF
          fi
          
          # Crear archivo docker-compose.yml si no existe
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            frontend:
              build:
                context: .
                dockerfile: Dockerfile.frontend
              ports:
                - "3000:3000"
              environment:
                - VITE_API_URL=https://florkafun.online:1337/api
                - REACT_APP_API_URL=https://florkafun.online:1337/api
              depends_on:
                backend:
                  condition: service_healthy
              restart: always
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              deploy:
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
                  window: 120s
              
            backend:
              build:
                context: ./backend
                dockerfile: Dockerfile
              ports:
                - "1337:1337"
              environment:
                - NODE_ENV=production
                - DATABASE_CLIENT=sqlite
                - DATABASE_FILENAME=.tmp/data.db
              volumes:
                - ./backend/.tmp:/opt/app/.tmp
                - ./backend/public:/opt/app/public
              restart: always
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:1337/_health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
              deploy:
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
                  window: 120s
              
            nginx:
              image: nginx:alpine
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf
                - ./ssl:/etc/nginx/ssl
              depends_on:
                frontend:
                  condition: service_healthy
                backend:
                  condition: service_healthy
              restart: always
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:80"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 30s
              deploy:
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
                  window: 120s
                  
            watchtower:
              image: containrrr/watchtower
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
              command: --interval 300 --cleanup
              restart: always
              environment:
                - WATCHTOWER_NOTIFICATIONS=email
                - WATCHTOWER_NOTIFICATION_EMAIL_FROM=noreply@florka.fun
                - WATCHTOWER_NOTIFICATION_EMAIL_TO=admin@florka.fun
          EOF
          fi
          
          # Crear Dockerfile para frontend si no existe
          if [ ! -f Dockerfile.frontend ]; then
            cat > Dockerfile.frontend << 'EOF'
          FROM node:18-alpine
          
          # Instalar curl para healthchecks
          RUN apk add --no-cache curl
          
          WORKDIR /app
          
          # Copiar package files
          COPY package*.json ./
          RUN npm ci --only=production
          
          # Copiar código fuente
          COPY . .
          
          # Build de la aplicación
          RUN npm run build
          
          # Instalar serve para servir archivos estáticos
          RUN npm install -g serve
          
          # Crear usuario no-root para seguridad
          RUN addgroup -g 1001 -S nodejs
          RUN adduser -S nextjs -u 1001
          USER nextjs
          
          EXPOSE 3000
          
          # Healthcheck
          HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
            CMD curl -f http://localhost:3000 || exit 1
          
          CMD ["serve", "-s", "build", "-l", "3000"]
          EOF
          fi
          
          # Crear Dockerfile para backend si no existe
          if [ ! -f backend/Dockerfile ]; then
            cat > backend/Dockerfile << 'EOF'
          FROM node:18-alpine
          
          # Instalar curl para healthchecks
          RUN apk add --no-cache curl
          
          WORKDIR /opt/app
          
          # Copiar package files
          COPY package*.json ./
          RUN npm ci --only=production
          
          # Copiar código fuente
          COPY . .
          
          # Crear directorio para base de datos
          RUN mkdir -p .tmp
          
          # Build de la aplicación
          RUN npm run build
          
          # Crear usuario no-root para seguridad
          RUN addgroup -g 1001 -S nodejs
          RUN adduser -S strapi -u 1001
          
          # Cambiar permisos
          RUN chown -R strapi:nodejs /opt/app
          USER strapi
          
          EXPOSE 1337
          
          # Healthcheck
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:1337/_health || exit 1
          
          CMD ["npm", "start"]
          EOF
          fi
          
          # Crear configuración de nginx si no existe
          if [ ! -f nginx.conf ]; then
            cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              upstream frontend {
                  server frontend:3000;
              }
              
              upstream backend {
                  server backend:1337;
              }
              
              server {
                  listen 80;
                  server_name florka.fun www.florka.fun;
                  
                  # Redirigir a HTTPS
                  return 301 https://$server_name$request_uri;
              }
              
              server {
                  listen 443 ssl http2;
                  server_name florka.fun www.florka.fun;
                  
                  # Configuración SSL (agregar certificados)
                  # ssl_certificate /etc/nginx/ssl/cert.pem;
                  # ssl_certificate_key /etc/nginx/ssl/key.pem;
                  
                  # Proxy para frontend
                  location / {
                      proxy_pass http://frontend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
                  
                  # Proxy para backend API
                  location /api/ {
                      proxy_pass http://backend/api/;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
                  
                  # Proxy para admin de Strapi
                  location /admin/ {
                      proxy_pass http://backend/admin/;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }
          }
          EOF
          fi
          
          # Construir y levantar contenedores con restart automático
          docker-compose build --no-cache
          docker-compose up -d
          
          # Esperar a que los servicios estén listos
          echo "⏳ Esperando a que los servicios estén listos..."
          sleep 30
          
          # Verificar que todos los servicios estén corriendo
          for i in {1..10}; do
            if docker-compose ps | grep -q "Up"; then
              echo "✅ Servicios iniciados correctamente"
              break
            else
              echo "⚠️ Reintentando iniciar servicios... ($i/10)"
              docker-compose restart
              sleep 15
            fi
          done
          
          # Configurar auto-restart y monitoreo
          echo "🔄 Configurando auto-restart y monitoreo..."
          
          # Crear script de monitoreo continuo
          cat > /opt/florka-fun/monitor-services.sh << 'MONITOR_EOF'
          #!/bin/bash
          
          LOG_FILE="/var/log/florka-monitor.log"
          PROJECT_DIR="/opt/florka-fun"
          
          log_message() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> $LOG_FILE
          }
          
          check_and_restart() {
              cd $PROJECT_DIR
              
              # Verificar si los contenedores están corriendo
              if ! docker-compose ps | grep -q "Up"; then
                  log_message "⚠️ Servicios caídos detectados, reiniciando..."
                  docker-compose restart
                  sleep 30
                  
                  if docker-compose ps | grep -q "Up"; then
                      log_message "✅ Servicios reiniciados exitosamente"
                  else
                      log_message "❌ Error al reiniciar servicios"
                      # Intentar rebuild completo
                      docker-compose down
                      docker-compose up -d
                      log_message "🔄 Rebuild completo ejecutado"
                  fi
              fi
              
              # Verificar conectividad HTTP
              if ! curl -f http://localhost:3000 >/dev/null 2>&1; then
                  log_message "⚠️ Frontend no responde, reiniciando..."
                  docker-compose restart frontend
              fi
              
              if ! curl -f http://localhost:1337/admin >/dev/null 2>&1; then
                  log_message "⚠️ Backend no responde, reiniciando..."
                  docker-compose restart backend
              fi
          }
          
          # Ejecutar verificación
          check_and_restart
          MONITOR_EOF
          
          chmod +x /opt/florka-fun/monitor-services.sh
          
          # Configurar cron para monitoreo cada 2 minutos
          (crontab -l 2>/dev/null; echo "*/2 * * * * /opt/florka-fun/monitor-services.sh") | crontab -
          
          # Configurar systemd para auto-start en boot
          cat > /etc/systemd/system/florka-fun.service << 'SERVICE_EOF'
          [Unit]
          Description=Florka Fun Application
          Requires=docker.service
          After=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/opt/florka-fun
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          TimeoutStartSec=0
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF
          
          # Habilitar y iniciar el servicio
          systemctl daemon-reload
          systemctl enable florka-fun.service
          systemctl start florka-fun.service
          
          # Configurar logrotate para logs
          cat > /etc/logrotate.d/florka-fun << 'LOGROTATE_EOF'
          /var/log/florka-monitor.log {
              daily
              rotate 7
              compress
              delaycompress
              missingok
              notifempty
              create 644 root root
          }
          LOGROTATE_EOF
          
          # Limpiar imágenes no utilizadas
          docker system prune -f
          
          # Arreglar configuración de Nginx
          echo "🔧 Arreglando configuración de Nginx..."
          if [ -f "fix-nginx-admin.sh" ]; then
              chmod +x fix-nginx-admin.sh
              bash fix-nginx-admin.sh
          fi
          
          # Verificación final
          echo "🔍 Verificación final de servicios..."
          sleep 10
          
          if docker-compose ps | grep -q "Up"; then
              echo "✅ Deployment completed successfully!"
              echo "🌐 Frontend: https://florkafun.online"
              echo "🔧 Backend Admin: https://florkafun.online/admin/"
              echo "📡 API: https://florkafun.online/api/"
              echo "📊 Monitoreo activo cada 2 minutos"
              echo "🔄 Auto-restart configurado"
              echo "📝 Logs en: /var/log/florka-monitor.log"
          else
              echo "❌ Error: Algunos servicios no están corriendo"
              docker-compose ps
              exit 1
          fi